exit
days
cont
@user
cont
<<<<<<< HEAD
@results
exit
@results
cont
their_location.person
cont
their_location.person
cont
their_location.person
cont
their_location.person
cont
co_locations[4]
co_locations[3]
co_locations[2]
co_locations[1]
co_locations[0]
co_locations
self
co_locations[0][0].name
co_locations[0]
co_locations
exit
@results[3]
@results[2]
@results[1]
@results[0]
@results[1]
@results
exit
@people
people
@positions
exit
@events
@positions
@employers
@people
@cities
exit
@results.each{ |result| puts result.ids}
@results.each{ |result| puts result.id}
@results.each{ |result| result.ids}
@results.each{ |result| result.id}
@results.each{ |result| result.name ? result.name : result.title}
@results.each do |result|
@results.each.do |result|
@results
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position).length
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Event)
self.co_located(self.sorted_positions, Event)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont!
cont
co_locations = co_locations.concat self.co_located(self.sorted_positions, Event)
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.events_as_visitor, Position)
self.co_located(self.sorted_positions, Position)
cont
their_class
cont
self.co_located(self.sorted_positions, Position)
cont
self.co_located(self.sorted_positions, Position, "city_id = #{location.destination.id}")
cont
self.co_located(self.sorted_positions, Position, "city_id = #{location.destination.id}")
cont
destination
destinations
"destination"
self.co_located(self.sorted_positions, Position, "destination")
cont
self.co_located(self.sorted_positions, Position, "destination")
co_locations.concat self.co_located(self.sorted_positions, Position, "destination")
self.co_located(self.sorted_positions, Position, "destination")
cont
ont
self.sorted_positions
self.co_located(self.sorted_positions, "Position", "destination")
self.co_located(self.sorted_positions, Position, "destination")
cont
self.co_located(self.sorted_positions, Position, "destination")
self.co_located(self.sorted_positions, Position, destination)
(self.sorted_positions, Position, destination)
cont
self.co_located_e_p
self.co_located_p_p
cont
their_position
cont
self.co_located_e_p
self.co_located_p_p
cont
my_position
cont
self.events_as_visitor
self.events_as_visitors
self.events
cont
self.co_located
self.colocated
cont
find_overlap(my_position, their_position)
cont
find_overlap(my_position, their_position)
cont
find_overlap(my_position, my_position)
find_overlap(my_position, position)
position
find_overlap(my_position, test)
position
find_overlap(my_position, position)
find_overlap(my_position, test)
find_overlap(my_position, position)
self.find_overlap(my_position, position)
find_overlap(my_position, position)
position
my_position
find_overlap(my_position, position)
position
my_position
my_postions
self
find_overlap(my_position, position)
exit
exi
cont
Position.where("city_id = #{my_position.city.id}")-self.sorted_positions
Position.where("city_id = #{my_position.city.id}")
Position.where("city_id = #{my_position.city.id}")-self.sorted_positions
cont
(Position.where("city_id = #{my_position.city.id}")-self.sorted_positions).length
Position.where("city_id = #{my_position.city.id}")-self.sorted_positions
Position.where("city_id = #{my_position.city.id}").length-self.sorted_positions
Position.where("city_id = #{my_position.city.id}").length
Position.where("city_id = 283").length
Position.where("city_id = 283")
Position.where(city_id == my_position.city_id)
Position.where(city == my_position.city)
my_position.city
my_position
cont
my_position
Position.where(city_id == my_position.city_id)
Position.all[0].city
Position.all[0]
Position.all.length
Positions.all.length
self.positions.length
self.positions
self.positions.lengths
Position.all.length
cont
timeline
cont
timeline
cont
e.start_date
e.destination.name
e.destination
e.title
e
cont
p.start_date
p.city.name
p.ity.name
p.city
p.title
p
cont
timeline
cont!
cont
self.events_as_visitor
cont!
cont
p
cont
self.positions
cont
self.positions
self.position
self
self.positions
cont
event_params
cont
params
cont
params
cont
ont
params
event_params
cont
params
event
event_params
City.find(25)
@event
@event.save
@event
@event.update_attributes(event_params)
@event
cont
@event.valid?
@event.update_attributes(event_params)
@event
cont
@event
cont
@event.valid?
    @event = Event.new(event_params)
event
event.destination=event_params[:destination]
event.visitor=event_params[:visitor]
event=Event.new
event.visitor=event_params[:visitor]
event_params
cont
event.visitor=event_params[:visitor]
=======
session_params
>>>>>>> ea5ae7d653eeb6f988b1ad84f3518f8151e0a703
